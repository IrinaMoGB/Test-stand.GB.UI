{
	"info": {
		"_postman_id": "ac69ca4f-83a1-4cc7-bdfd-0fb51028abdd",
		"name": "Final Work. Geekbrains",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17153308"
	},
	"item": [
		{
			"name": "My posts ASC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Количество постов на одной странице = 4\", function () { \r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4); \r",
							"});\r",
							"\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "My posts DESC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Количество постов на одной странице в массиве = 4\", function () { \r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4); \r",
							"});\r",
							"\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=DESC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "DESC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response to be body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response status code is ok\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"response to not have error\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"pm.test(\"Body matches string userId\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"22241\");\r",
							"});\r",
							"pm.test(\"Body matches string username\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"username\");\r",
							"});\r",
							"pm.test(\"Body matches string token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"verify token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.eql(\"2a2d320d48bfffab6ba20f31574134a1\");\r",
							"});\r",
							"pm.test(\"verify that username equals Pavel_GB\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Pavel_GB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "Pavel_GB",
							"type": "text"
						},
						{
							"key": "password",
							"value": "98710853a0",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Other posts ASC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 6000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Количество постов на одной странице в массиве data = 10\", function () { \r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.be.eql(10); \r",
							"});\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(3);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"accept-encoding": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=2",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Other posts DESC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 6000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Количество постов на одной странице в массиве data = 10\", function () { \r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.be.eql(10); \r",
							"});\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(3);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"accept-encoding": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=DESC&page=2",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "DESC"
						},
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Other posts DESC ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 6000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(3);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"accept-encoding": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ALL&page=2",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ALL"
						},
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Other posts ASC page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 6000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Массив data пустой\", \r",
							"function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    let data = jsonData.data;\r",
							"    pm.expect(data).to.be.empty;\r",
							"    });\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has title\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Количество постов на одной странице в массиве data = 10\", function () { \r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.be.eql(10); \r",
							"});\r",
							"\r",
							"pm.test(\"prevPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"nextPage has type String\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.meta.nextPage).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"count has type Integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var countValue = jsonData.meta.count;\r",
							"    pm.expect(Number.isInteger (countValue)).to.be.true;\r",
							"});\r",
							"pm.test(\"Verify that previous page equals 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(999998);\r",
							"});\r",
							"pm.test(\"Verify that next page equals 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"accept-encoding": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "2a2d320d48bfffab6ba20f31574134a1",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=999999",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "999999"
						}
					]
				}
			},
			"response": []
		}
	]
}